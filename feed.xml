<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-02-20T15:46:46-05:00</updated><id>/</id><title type="html">Tigim Insight</title><subtitle>Life of IT Enthusiast</subtitle><entry><title type="html">블로그를 다시 깃헙으로</title><link href="/back-to-github" rel="alternate" type="text/html" title="블로그를 다시 깃헙으로" /><published>2020-02-06T00:00:00-05:00</published><updated>2020-02-06T00:00:00-05:00</updated><id>/back-to-github</id><content type="html" xml:base="/back-to-github">&lt;p&gt;한 3년 동안 잘 쓰고 있던 &lt;strong&gt;빗버킷 + 휴고&lt;/strong&gt; 블로그 서비스가 어느 순간 맛이 가더니 이젠 아예 되질 않는다. 에어로빅인가 뭔가 서비스가 붙고 ㅈㄹ 염병을 하더만, 몇 달전부터 https 인증서가 중단이 되고, 며칠 전부턴 그냥 먹통!!! 소스가 날아간게 아닌까 걱정했는데 다행히 bitbuck에 멀쩡이 살아 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scriptedtea.com/assets/images/posts/jekyll_pages.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 다시 github.io와 지킬 조합으로 컴백!!! 시대에 뒤떨어진 UI가 여전히 눈에 거슬리지만, 컨텐츠 정리 및 기록 차원이기에 상관 없다. 천년만년 이대로 있어다오~~ ㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;[Update 2020.02.07] 구린 UI를 그냥 두고 보지 못하고 하루를 홀랑 써서 Theme 업뎃 함. 아~ 만족해~ ㅋㅋ&lt;/p&gt;</content><author><name>Jong Yoon Kim</name></author><category term="life" /><summary type="html">Bitbucket/Hugo 블로그 서비스 망함</summary></entry><entry><title type="html">EV Charging Robot</title><link href="/idea_charging_robot" rel="alternate" type="text/html" title="EV Charging Robot" /><published>2020-01-24T00:00:00-05:00</published><updated>2020-01-24T00:00:00-05:00</updated><id>/idea_charging_robot</id><content type="html" xml:base="/idea_charging_robot">&lt;p&gt;모바일 로봇 관련해서 연구는 하고 있지만, 응용 분야가 생각보다 제한적이다. 돌아다니는거 보면 신기하긴 한데 그래서 뭐? ㅎㅎㅎ 그리고, 기술적으로 해결해야 하는 부분도 많다. 가격도 비싸고.. ㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;암튼 아이디어 하나 생각해 보라 하길래, 전부터 고민하던 EV (Electric Vehicles) 충전 로봇에 대해 썰을 한번 풀어본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[한줄 요약]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이동 로봇으로 아파트/콘도 같은 집단 거주 건물 내 전기차 충전 서비스 제공&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[아디이어 배경]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정부 규제: 국제적 트렌드인 탄소 배출 감소 정책에 맞춰 전기차 보급은 계속 늘어날 것으로 예상&lt;/li&gt;
  &lt;li&gt;전기차 시장 성장세: 최근 테슬라의 발목을 잡았던 대량 생산의 문제점이 드디어 해결되고, 배터리 가격은 지속적으로 하락&lt;/li&gt;
  &lt;li&gt;집단 거주 건물 비율: 주택 선호가 높은 캐나다에서 조차 콘도 거주 비율이 40%가 넘으며, 한국/중국의 경우 대도시의 인구 대부분이 아파트에서 생활&lt;/li&gt;
  &lt;li&gt;충전 시설 미비: 전기차 구매시 가장 큰 고민으로 이 문제가 해결 된다면 자동차 시장의 급격한 트렌드 변화 예상&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[충전 로봇 시장 현황]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현재까지 대기업 중심으로 시도는 있으나 상용 제품은 나오지 않은 상태&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/Tesla/status/629305813912326146?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E629305813912326146&amp;amp;ref_url=https%3A%2F%2Fwww.engadget.com%2F2015%2F08%2F06%2Fteslas-prehensile-car-charger-plugs-itself-in-automatically%2F&quot;&gt;테슬라 충전 로봇 팔, 2015년 8월&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.etnews.com/20180911000268?obj=Tzo4OiJzdGRDbGFzcyI6Mjp7czo3OiJyZWZlcmVyIjtOO3M6NzoiZm9yd2FyZCI7czoxMzoid2ViIHRvIG1vYmlsZSI7fQ%3D%3D&quot;&gt;삼성C랩, 업계 최초 전기차 충전 로봇 ‘EVAR’ 개발, 2018년 9월&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JNJ3X6ReQTo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.engadget.com/2019/12/26/vw-ev-charging-robot/&quot;&gt;폭스바겐 충전 로봇 프로토타입 프로젝트, 2019년 11월&lt;/a&gt; &lt;br /&gt;
&lt;img src=&quot;http://www.irobotnews.com/news/photo/201803/13299_31474_742.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[잠재적 고객]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일단 성공만 한다면 돈많은 클라이언트들이 널리고 널린 시장&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전기차 회사&lt;/li&gt;
  &lt;li&gt;빌딩 관리 회사&lt;/li&gt;
  &lt;li&gt;주차 관리 회사&lt;/li&gt;
  &lt;li&gt;전기 발전 회사&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[기술적 과제]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;차량의 충전 위치 파악 및 주유(?) 탭 열기: 제조사 마다 다른 표준 사용시 문제&lt;/li&gt;
  &lt;li&gt;이동 로봇에 충전을 위한 전기 또는 전기 배선 연결: (아이디어) 두대의 로봇을 사용하여 하나는 전기 배선 담당하고 다른 하나는 차량과 연결 부분 담당&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[잠재적 위험 요소]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존 내연 기관 차량의 종말로 모든 주차장에 충전 시설 보유: (반박 의견) 모든 파킹 스팟에 충전 시설 설치는 비용 낭비. 충전 및 과금을 위한 극적인 제반 시설의 변화가 필요&lt;/li&gt;
  &lt;li&gt;Working From Home등 사회 환경 변화로 인한 집단 거주지 인기 쇠퇴: (반박 의견) 공영 주차장에서의 서비스 등으로 서비스 다변화 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[Reference]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.toronto.ca/wp-content/uploads/2019/05/9685-EMS-Assessment-Phase-Final-Project-Report.pdf&quot;&gt;City of Toronto Electric Mobility Strategy Assessment Phase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blogto.com/city/2019/09/toronto-mayor-plans-eliminate-100-all-greenhouse-gas-emissions/&quot;&gt;Greenhouse Gas Emission Cut&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://emc-mec.ca/new/ev-sales-report-q1-2019-canada-reaches-over-100000-evs/&quot;&gt;Electric Car Market Growth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Condominiums_in_Canada&quot;&gt;People who are Living in Condo in Toronto : 1.478M&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://urbantoronto.ca/news/2019/05/gta-condo-construction-hits-record-high-q1-2019&quot;&gt;Condominium Construction Growth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">모바일 로봇 관련해서 연구는 하고 있지만, 응용 분야가 생각보다 제한적이다. 돌아다니는거 보면 신기하긴 한데 그래서 뭐? ㅎㅎㅎ 그리고, 기술적으로 해결해야 하는 부분도 많다. 가격도 비싸고.. ㅎㅎㅎ 암튼 아이디어 하나 생각해 보라 하길래, 전부터 고민하던 EV (Electric Vehicles) 충전 로봇에 대해 썰을 한번 풀어본다. [한줄 요약]</summary></entry><entry><title type="html">SDE Job Interview 후기</title><link href="/sde_interview_with_a_big_tech_company" rel="alternate" type="text/html" title="SDE Job Interview 후기" /><published>2019-11-09T00:00:00-05:00</published><updated>2019-11-09T00:00:00-05:00</updated><id>/sde_interview_with_a_big_tech_company</id><content type="html" xml:base="/sde_interview_with_a_big_tech_company">&lt;p&gt;정말 가고 싶었던 5대 테크 왕 중 한 회사와의 잡 인터뷰 후기.&lt;/p&gt;

&lt;p&gt;불합격 하긴 했지만, 자질(?)보다는 운이 없었다라고 생각하며 다음을 위해 기록해 둠.&lt;/p&gt;

&lt;p&gt;NDA로 인해 자세한 내용과 회사명을 소개할 수 없지만, 대충 짐작할 수 있지 않나 생각이 든다. ㅎㅎㅎ 전체 채용 과정은 대기업 답게 무난하고 깔끔 했으며, 프로세스가 정형화 되어 있었다. 제일 좋았던 점은 인터뷰 관련 비용을 모두 커버해 주는 것이고, 단점은 프로세스가 길고 마치 채용 공장에 다녀온 느낌? 또 한가지 잡설이지만 미쿡 대기업이라 하더라도 인간적인 실수가 정말 많으므로 중간 중간 확인을 해야 한다.&lt;/p&gt;

&lt;p&gt;보통의 회사와 마찬가지로 입사지원 - HR인터뷰 - 온라인코딩 - 폰인터뷰(난 하지 않았는데, 온라인코딩 결과가 안좋으면 하는듯? 짐작이다) - 온사이트 인터뷰 순으로 진행 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[코딩 인터뷰 준비]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제일 까다로운 코딩 인터뷰 준비는 다음 두 유투버의 도움을 가장 많이 받았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCW4ixpFivk6eJl8b5bFOLkg&quot;&gt;승지니어 Sengineer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC9a_itvK_850NXybsKxB_gw&quot;&gt;Ricky Cho&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한달 동안, 무한 반복으로 시청 했으며 풀이 보다는 &lt;strong&gt;생각의 흐름에 집중&lt;/strong&gt; 했다. 두분 다 미쿡에 거주하시는 분들로 승지니어는 현재 구글러이신듯하고, 리키님은 뉴욕에 거주중인듯… 난 시작을 승지니어 채널로 했는데, 후반부에는 리키님 내용을 반복해서 들었다. 이분 말이 느려서 속도를 1.75 나 2 배속으로 해놓고 들으면 꽤 많은 양을 한번에 볼 수 있어 좋았다.&lt;/p&gt;

&lt;p&gt;다음으로 많이 참고한 내용은 릿코드에 있는 &lt;a href=&quot;https://leetcode.com/discuss/interview-experience&quot;&gt;interview experience&lt;/a&gt; 섹션으로 지원 회사 / 지역 등 세분화해서 준비 할 수 있으며, 거의 매일 후기가 올라와서 실전 문제라 생각하고 풀었다.&lt;/p&gt;

&lt;p&gt;코딩 인터뷰 중에 제일 까다로운 건 모두 아시다시피 Dynamic Programming인데, 솔직히 이건 실제 업무에도 그다지 도움 되지 않은듯 하여 미디엄에 있는 &lt;a href=&quot;https://medium.com/.../top-10-dynamic-programming&quot;&gt;top-1- dynamic programming&lt;/a&gt; 아티클를 참고해서 준비 했고, 모르는 문제 나오면 틀리자고 생각했다. 근데, 위 두 유투버도 어느 정도 DP를 다루기 때문에 많은 부분이 커버 된다.&lt;/p&gt;

&lt;p&gt;마지막으로 릿코드 문제 중 임의로 선정하여 하루 2-3개를 풀었다. 꼭 풀려고 노력하기 보다는 15분 내로 해결 안되면 Discussion 섹션으로 가서 제일 추천 많은 풀이 과정을 참고하였다. 여기서도 중요한건 &lt;strong&gt;풀이한 사람의 생각의 흐름을 내 머리에 복사&lt;/strong&gt;한다는 느낌으로 답변을 숙지했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[디자인 인터뷰 준비]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;나는 실제로 Big Scale의 시스템을 디자인 해본 적도 경험해 본적도 없어 이부분이 제일 문제였고, 실제 불합격의 요인이었다. 구글링을 해보아도 딱히 좋은 솔루션은 없고, 아래 사이트가 답이다라고 언급 하는 정도?? ㅎㅎㅎ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/courses/grokking-the-system-design-interview?aid=5082902844932096&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=grokking-manual&amp;amp;gclid=Cj0KCQiA-bjyBRCcARIsAFboWg3ora1kJRoJXd5gvXPozzkM62YPZD_ko3tY-W5O4ORwecxkPjJqySQaAn3HEALw_wcB&quot;&gt;Grockking the System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보고 나면, 어 그래!그래! 하지만 막상 설명을 하려면… 으…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/courses/grokking-the-object-oriented-design-interview&quot;&gt;Grockking the OOP Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개인적으로 위의 강의도 도움이 되었다. 둘 다 &lt;strong&gt;유료&lt;/strong&gt;라 진입 장벽이 있지만, 연봉 20만불을 위해 이정도는 투자 하는 걸로 하자!!! ㅋ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[스크리닝 질문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이미 말했다시피 난 온라인 코딩만 했다. 여기서 받은 질문은 2개이고 난이도는 초-중 이었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two Sum 응용&lt;/li&gt;
  &lt;li&gt;Two Pointer 응용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;풀이가 끝나면 영어로 설명을 적어야 한다. 근데 답만 제대로 나왔다면 크게 신경쓰지 않아도 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[온사이트 인터뷰 질문]&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;온갖 버그로 가득한 클래스를 수정해서 완성 : 파일처리 및 어레이 처리 능숙도 체크, 최적화하라해서 마지막엔 해쉬맵으로 해결&lt;/li&gt;
  &lt;li&gt;바이너리서치트리에서 큰 숫자 k개 : inorder 순회 역순&lt;/li&gt;
  &lt;li&gt;그래프 문제 위상 정렬 응용 : 인바운드 체크&lt;/li&gt;
  &lt;li&gt;우버 시스템 디자인(바 레이저) : 개망했다고 말한것 ㅋㅋ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모두 화이트 보드에 풀이 해야 한다. 1번의 경우, 나는 C/C++/Python임에도 자바/C#으로 문제를 만들어서 왔다. 어떤 의도인지는 모르겠으나 언어를 초월한(?) 해결 능력을 보여달라는 것 같았다. ㅎㅎㅎ 말로 설명하면서, 모르는 API는 물어봐서 작성.&lt;/p&gt;

&lt;p&gt;4번 우버 시스템 디자인은 사실 전날에도 리뷰 했지만, 실제 해보지 않은걸 뇌피셜로 설명한다는게 여간 힘든게 아니었다. 1시간을 그냥 어버버 하면서 보냈다. ㅠ.ㅠ 만일, 영어가 능숙하다면 구렁이 담 넘어 가듯 해볼 수 있었겠지만, 뭐… 그냥 아쉬웠다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[질문에 따른 예상 솔루션]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;릿코드를 많이 풀다 보면 대충 이렇게 정리가 되는 듯 하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최대/최소 경우의 수 찾기: &lt;strong&gt;Dynamic Programming&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;모든 경우를 구해라: &lt;strong&gt;백트랙킹&lt;/strong&gt; or &lt;strong&gt;DFS&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;최단거리: &lt;strong&gt;BFS&lt;/strong&gt; or &lt;strong&gt;Heap/Prority Queue&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;o(logn)으로 최적화: &lt;strong&gt;바이너리서치트리&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;o(1)으로 최적화: &lt;strong&gt;해쉬맵&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;어레이/리스트에서 한번 순회로 최적화: &lt;strong&gt;해쉬맵&lt;/strong&gt; or &lt;strong&gt;스택&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;싱글 링크드 리스트 관련: &lt;strong&gt;리버스&lt;/strong&gt; or &lt;strong&gt;walker/runner&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;바이너리서치트리 관련: &lt;strong&gt;리컬전&lt;/strong&gt; or &lt;strong&gt;스택&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[인터뷰 중 문제 받은 후의 생각하는 방법/방향]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일단 이해가 가면, 잡단한 질문으로 최대한 시간 끌기. 최적화 하라는게 넘 짜증나서 ㅋㅋ 한번은 시간보다 일찍 끝내니까 백트랙킹 time complexity 찾으라고… 아놔.. -_-;;&lt;/li&gt;
  &lt;li&gt;이해 안가면, &lt;strong&gt;임의로 문제의 입력 값을 2-3 개 만들고, 그 문제의 출력 값을 물어보거나 예상 Output 찾아낸 후 솔루션 도출&lt;/strong&gt;. 이 회사 뿐만 아니라, 지원했던 모든 회사의 모르는 문제는 이 방법으로 다 해결되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[조언]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;항상 Time Complexity / Space Complexity는 물어본다. 리컬전의 공간 복잡도는 뭐? ㅎㅎㅎㅎㅎ&lt;/li&gt;
  &lt;li&gt;큰 회사 지원 전에 반드시 작은 회사로 인터뷰 연습을 해본다. 보통 다시 지원하려면 1년 걸린다.&lt;/li&gt;
  &lt;li&gt;여러 회사를 지원 해본 경험 상, 그 어떤 방법을 쓰더라도 솔루션은 도출해야 다음 스테이지로 넘어가는 것으로 보임.&lt;/li&gt;
  &lt;li&gt;항상 최적화 하라고 물어본다. 때문에 처음에는 생각의 흐름을 설명하고 Worst Algorithm으로 문제를 해결, 다음으로 최적화 솔루션으로 다시 작성.&lt;/li&gt;
  &lt;li&gt;화이트보드에 작성할 땐 천천히 하면서 바로 실행해 본다는 생각을 가지고 써야한다. 사진 찍어가는 경우도 있었음.&lt;/li&gt;
  &lt;li&gt;뭐든 말로 설명해야 한다. 그냥 풀이만 하면 떨어짐. 다른 중견 테크 기업 지원 했을때, 2시간 동안 10문제 완.벽.히 다 풀었는데도 탈락했다. 복기 해보니, 솔루션만 설명하고 (ex. 백트랙킹 쓸꺼야) 문제 풀이 중 거의 말을 하지 않았다.&lt;/li&gt;
  &lt;li&gt;영어 준비는 가능하면 많이 하자. 기본적인 CS Fundamentals는 다 영어로 설명 가능해야 한다. 더불어 여러 돌발 상황을 예상하고 답변을 준비해 두면 좋다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">정말 가고 싶었던 5대 테크 왕 중 한 회사와의 잡 인터뷰 후기.</summary></entry><entry><title type="html">캐나에서 2년 생활 회고</title><link href="/two_year_experience_in_canada" rel="alternate" type="text/html" title="캐나에서 2년 생활 회고" /><published>2019-04-21T20:00:01-04:00</published><updated>2019-04-21T20:00:01-04:00</updated><id>/two_year_experience_in_canada</id><content type="html" xml:base="/two_year_experience_in_canada">&lt;p&gt;며칠 전, 오랜 만에 &lt;a href=&quot;https://cafe.naver.com/iliveincan&quot;&gt;캐사사&lt;/a&gt;에 들렀는데, 어느 40대 소프트웨어 개발자분이 캐나다로 오신신다는 글을 보고 한번 다시 정리 해본다.&lt;/p&gt;

&lt;p&gt;생각날때마나 한번씩 하는 것인데 오늘이 그날이다!! ㅎㅎㅎ 이미 1년 회고기는 저 카페에 써놓긴 했는데, 나도 기억 안남! 다시 정리 ㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[결심]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;해외 생활을 결심한 건 두 가지 이유가 있었다.&lt;/p&gt;

&lt;p&gt;하나는 개발자로 나름 잘 지내고 있었으나, 한국에서의 마지막 이직 실패로 잉여의 삶을 사는 것이 너무 무료하였고, 다른 하나는 내가 영어 땜에 지난 몇 십년간 버린 시간/돈의 무게가 만만치 않기에 우리 아이들은 바이링구얼 될 수 있는 기회가 가졌으면 하는 것이었다.&lt;/p&gt;

&lt;p&gt;후보 국가는 뉴질랜드 아니면 캐나다로 가기로 금방 결정이 났다.&lt;/p&gt;

&lt;p&gt;개인적으로는 뉴질랜드를 좀 더 선호했는데, 영주권 취득 후, 2년 정도만 거주하면 평생 영주권이 유지 된다는 이유 때문이었다. 반 공무원인 와이프에겐 참으로 좋은 조건임에도 불구하고, 와이프의 비저항/무협조로 지지 부진하게 진행되었고, 그러던 중 영주권 받을 기회(준비중에 이민 점수 상향)가 날아가게 되면서, 어쩔 수 없이 캐나다로 방향을 틀었다.&lt;/p&gt;

&lt;p&gt;나중에 마눌님께 왜그랬냐 물어봤더니, 벌레 많고, 심심한 섬나라에 가기 싫으시다고… 내가 보기엔 그냥 미쿡 옆에 가고 싶었던 것 같은데~ ㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[준비]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이미 해외 체류 경험이 있어서, 그다지 큰 걱정은 없었다. 그리고, 돌아올 예정이기에 굳이 큰 돈을 써가면서 영주권을 받고 갈 필요도 없어서, 체류 가능한 비자를 알아보게 되었다.&lt;/p&gt;

&lt;p&gt;캐나다는 이쁘게도 컬리지 이상의 대학에서 공부하면, 배우자는 워크퍼밋, 아이들은 임시 체류 비자가 나온다 하여 고민없이 결정하고, 유학원에 의뢰, 수속을 바로 밟았다.  결정 후, 상담-서류준비-학교선정및지원-신체검사-아이엘츠시험-출국 까지는 약 1년 정도가 걸렸는데, 정상적인 생활(?)을 해온 우리 가족에겐 큰 문제는 없었다.&lt;/p&gt;

&lt;p&gt;와이프가 공부하기로 했기에 2년 간 마냥 놀고 싶었으나, 캐나다 대도시 물가가 어마 무시한 관계로 내가 취업해서 돈벌기로 결정을 당했다. ㅠ.ㅠ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[출국 전 취업 준비 - 영어]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이미 한차례 외쿡 생활을 1년 간 했음에도 불구하고, 어마무시한 장애물이 있었으니 바로 영어였다. 기본적으로 한국말도 어버버한 내게 있어서 영어는 커다란 문제였다. 솔직히 말해서 개발자 중에 말 잘하는 인간 몇 되겠냐고… ㅠ.ㅠ (물론 혀그래머 제외!!) 어째든 준비가 필요 하다는 사실은 변하지 않고 있었음에도 불구하고 반년동안 전혀 발전이 없었다. 결국, 와이프가 선발대로 2달 먼저 캐나다로 떠나고 깨달았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;한국에서는 죽었다 깨어나도 영어 준비가 안된다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단, 외국어 습득이 원할한 나이가 지났으며, 와이프가 휴직 전 회사일로 반년을 까맣게 불태우셔서 혼자 살다시피 했기에 아이 둘 육아와 회사 일, 출국 전 처리해야 하는 일 등으로 거의 짬이 나지 않았다.&lt;/p&gt;

&lt;p&gt;결국, 생각한 것이 “딱 하나만 준비하자” 였다. 리딩은 어느 정도 되고, 라이팅은 인터넷이 해결해 줄테니, 리스닝에 집중하기로 했다. 나름 논리적으로 판단한건데, 이유는 지원을 하고 폰스크린이라는 것을 할때, 알아듣지 못하면 전화기 너머로 정적만 전달하거나 “아임쏘리” 무차별 콤보를 시전할게 뻔하기 때문이었다.&lt;/p&gt;

&lt;p&gt;리스닝도 첨엔 무작정 미드 같은 거 보면서 듣다가 목표가 폰인터뷰라는 것을 상기하고 인터뷰 관련 내용의 유투브 위주로 찾아봤다. 그 중 제일 도움 되었던 것이 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLI1t_8YX-ApvMthLj56t1Rf-Buio5Y8KL&quot;&gt;Cracking the Coding Interview&lt;/a&gt; 저자가 하는 방송이었다. 정확한 발음에 어떻게 코드를 설명하면 되는지 알게 되었고, 인터뷰 요령과 질문들을 미리 체험할 수 있었기에 자막으로 한번 듣고, 없이 듣고 계속 반복하면서 청취 했다.&lt;/p&gt;

&lt;p&gt;폰인터뷰는 보통 네이티브가 하기 때문에 이상한 엑센트/발음 걱정은 하지 않아도 된다. 행여 폰 인터뷰어 발음이 이상하면, 가지 말아야 할 회사이거나, 구글같은 드림 회사이다. ㅎㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[출국 전 취업 준비 - 개발관련]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;개발자 커리어가 망가진 상태이기 때문에 어떻게 하든 없는 실력을 증명 해야할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;제일 먼저 한 것이 GitHub에 포트폴리오 작성이었다. 때마침 시작한 리서치 프로젝트에 코드 개발 및 데모가 필요하다하여 자원하였고, 해당 프로젝트에서 했던 리서치 및 연습한 코드를 깃헙에 올렸다. 덧붙여서 예전에 회사에서 작성한 것 중에 쓸만한 유물(?)들을 찾아 같이 올렸다. 물론, 너무 티나게 깔끔하게 정리하지는 않았고, 얘가 개발은 할 줄 알겠구나 하는 정도로 정리해서 커밋을 했다.&lt;/p&gt;

&lt;p&gt;그리고, 유튜브에도 1년 전부터 프로젝트의 일부(문제가 되지 않을 만큼)를 촬영해서 올렸다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pdkdsPV1m_I&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;[출국, 입국 그리고 정착]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;직장 동료 중 캐나다 시민권자가 있어 많은 도움을 받았다. 특히, 하우스 렌팅을 위해 에이전트를 소개시켜 줬는데, 초기 정착에 많은 도움을 주셨다.&lt;/p&gt;

&lt;p&gt;랜딩 지역은 와이프 학교 때문에 토론토로 이미 정해졌고, 렌트비 범위와 학교 근처로 콘도를 요청 했는데, 때마침 새로 지어진 데가 있어서 와이프가 도착하자마자 바로 계약서 쓰고 입주하고 처리가 끝났다.&lt;/p&gt;

&lt;p&gt;이게 별것 아닌것 같지만, 한국과 달리 집주소가 없으면 어떤 것도 할 수 없는 캐나다에서는 거주할 집을 큰 고생없이 구했다는건 정말 큰 행운이었다. 거기다 캐나다에서 월세를 구하려면 집 주인이 로컬 크레딧(은행기록, 직장 등)을 요구하는데, 에이전트께서 보증을 해주어 큰 어려움이 해결했다. 만세~!!!&lt;/p&gt;

&lt;p&gt;사실, 여기까진 와이프 겪은 쉬운(?) 일이고, 난 남은 아이 둘과 200Kg 넘는 짐 보따리 짊어지고 출국/입국을 하게된다. 전날, 전세를 빼고, 짐을 지인들에게 버리고, 전세금은 은행에 넣은 후 영문 잔고 증명을 떼고, 마지막 영문 주민등록 등본을 떼고, 아이 학교에 부모 동반 해외 이주서류 작성하고, 회사에 영문서류 받고, 개인 짐 빼고, 타던 차를 팔고, 부모님과 작별인사를 하고 등등 이런건 뭐 하는 김에 했다…. 하…….&lt;/p&gt;

&lt;p&gt;출국 전 날, 이 모든걸 마친 후 공항 열차를 타고 가는데 어찌나 힘이 들던지 ㅎㅎ 어째든 이것도 이사라서 정말 많은 짐을 버렸음에도 엄청난 것들이 내 손과 등에 달라붙어서 캐나다 갈 준비를 하고 있었다.&lt;/p&gt;

&lt;p&gt;다음 날 아침 비행기라서 당일 새벽에 가도 되지만, 그 많은 짐과 아이들을 데리고 새벽에 갈 자신이 없어, 공항의 트랜짓 호텔에서 하루 묶었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.etnews.com/news/article/2018/01/25/cms_temp_article_25141556347898.jpg&quot; alt=&quot;워커힐 트랜짓 호텔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이쁘게 자는 아이들 모습과 약간의 긴장에 하루 밤을 잔듯 만듯 보내고 대한항공 토론토 행 비행기(약 14시간)를 탔다. 쩝~ 나중에 안 사실인데, 혼자 아이 둘 이상을 데리고 대한항공을 이용하면 &lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=kookjin2000&amp;amp;logNo=220186905731&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot;&gt;한가족 서비스&lt;/a&gt; 대상이라 많은 도움을 받을 수 있다고 한다. 출발지가 외국이어도 가능하단다. 잊지말자!!!&lt;/p&gt;

&lt;p&gt;내용이 너무 길어서 다음에 더 정리하겠음~ To be continued…&lt;/p&gt;</content><author><name>Jong Yoon Kim</name></author><category term="canada" /><summary type="html">며칠 전, 오랜 만에 캐사사에 들렀는데, 어느 40대 소프트웨어 개발자분이 캐나다로 오신신다는 글을 보고 한번 다시 정리 해본다.</summary></entry><entry><title type="html">분산 메시지 브로커 Kafka 설치 및 간단한 예제</title><link href="/kafka_setup_examples" rel="alternate" type="text/html" title="분산 메시지 브로커 Kafka 설치 및 간단한 예제" /><published>2019-04-10T20:00:01-04:00</published><updated>2019-04-10T20:00:01-04:00</updated><id>/kafka_setup_examples</id><content type="html" xml:base="/kafka_setup_examples">&lt;p&gt;카프카를 알게 된지 수년이 지났는데, 드디어 써보게 되었다. 물류 시스템에 들어가는 멀티 로봇 제어 시스템에서 쓸 예정이다. 알다시피 2-3 대의 소수 로봇 제어에서는 이런 독립 메시징 시스템 없이도 간단히 가능하다. 그런데, 원대한 시스템을 꿈꾸는 이가 있어서 구색을 맞춰주기 위해 한번 검토 해보았다.&lt;/p&gt;

&lt;p&gt;여기의 모든 예제와 설명은 우분투 16.04 기준으로 작성되었다.&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;Docker&lt;/h1&gt;

&lt;p&gt;요즘 왠만한 툴/시스템은 도커 이미지도 제공한다. OS에 맞춰 설치 하지 않아도 되는건 크나큰 장점이 아닐수 없다. 물론 도커는 설치해야 하지만… ㅎㅎㅎ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ sudo apt-get remove docker docker-engine docker.io  
    $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install apt-transport-https ca-certificates curl software-properties-common  
    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  
    $ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;
    $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-cache search docker-ce

    docker-ce - Docker: the open-source application container engine

    $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install docker-ce docker-compose
    $ sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;카프카-실행&quot;&gt;카프카 실행&lt;/h1&gt;

&lt;p&gt;깃허브에서 오픈소스 가져오는거 비슷하게 카프카 도커 이미지를 가져온다. 이건 도커 시스템 어딘가에 저장되기 때문에 어디서 실행하든 상관없다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ docker pull wurstmeister/kafka
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 간단히 실행할 수 있게 정리해 둔 소스코드(설정/스크립트)를 가져온다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ git clone https://github.com/wurstmeister/kafka-docker.git
    $ cd kafka-docker 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;연습으로 로컬에서 구동하는 것이기에 docker-dompose-single-broker.yml에서 KAFKA_ADVERTISED_HOST_NAME를 &lt;strong&gt;127.0.0.1&lt;/strong&gt;롤 변경 해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 실행 
    $ docker-compose -f docker-compose-single-broker.yml up

    # 정지 (다른창에서)
    $ docker-compose stop   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이걸로 구동완료!! 로그를 보고 있자면, 뭔지는 모르겠으나 주키퍼와 카프카가 사이좋게 메시지 뽑아내면서 잘 동작한다고 나온다.&lt;/p&gt;

&lt;h1 id=&quot;테스트&quot;&gt;테스트&lt;/h1&gt;

&lt;p&gt;개발 언어로 연습해 보기 전에 카프카 바이너리 릴리즈에 있는 스크립트로 동작을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼전 지금 구동 중인 카프카/스칼라 버전을 확인한다. Dockerfile 파일을 열어보면 다음과 같이 나오는데,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ARG kafka_version=2.2.0  
ARG scala_version=2.12  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 경우, &lt;strong&gt;kafka_2.12-2.2.0.tgz&lt;/strong&gt;를 파일을 &lt;a href=&quot;http://archive.apache.org/dist/kafka/&quot;&gt;http://archive.apache.org/dist/kafka/&lt;/a&gt;에 가서 받으면된다.&lt;/p&gt;

&lt;p&gt;압축을 해제하고,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ tar xzvf kafka_2.12-0.10.2.0.tgz  
    $ cd kafka_2.12-0.10.2.0  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;토픽을 만든다. 토픽은 Producer와 Consumer가 메시지를 주고 받을수 있게하는 채널/식별자 같은 것이다. 레플리케이션이나 파티션 등은 여기서 다루지 않겠다. 연습용이니까~ ㅎㅎ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test_topic  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음, 새로운 터미널을 열고 컨슈머를 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ cd kafka_2.12-0.10.2.0
    $ ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --from-beginning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로운 터미널을 열고 프로듀서를 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ cd kafka_2.12-0.10.2.0  
    $ ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topicc test_topic  

    # 터미널에 글자를 입력하고 엔터를 치면, 컨슈머 터미널에서 전송된걸 확인할 수 있다.  
    # 근데, 1초 정도 늦게 반응한다. (왜?)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;파이썬-프로듀서-예제&quot;&gt;파이썬 프로듀서 예제&lt;/h1&gt;

&lt;p&gt;파이썬으로 카프카 클라이언트 개발하기 위한 모듈은 몇가지 옵션이 있으나, 조사 결과 confluent-kafka가 제일 속도가 빠르다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.popit.kr/wp-content/uploads/2016/07/kafka_python-600x346.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;래빗MQ 대신 카프카 쓰는 이유가 속도인데 당연히 빠른 놈으로 고고~&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # Python 3.7에서만 테스트 해봄  
    $ pip install confluent-kafka   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트를 위해 &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-python/blob/master/examples/producer.py&quot;&gt;producer.py&lt;/a&gt; 가져온다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ python producer.py localhost:9092 test_topic  
    # 터미널 글자를 입력하고 엔터를 누르면 된다.  
    # 실시간으로 전송되는 것을 컨슈머 터미널에서 확인 할 수 있다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;c-프로듀서-예제&quot;&gt;C++ 프로듀서 예제&lt;/h1&gt;

&lt;p&gt;언제나 처럼 씨뿔뿔은 복잡하고 으렵다 ㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;먼저, 카프카 라이브러리를 설치해야 한다. sudo apt-get를 이용해서는 하지말고 소스로 설치해야 이후 C++래퍼 라이브러리가 정상으로 동작한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ git clone https://github.com/edenhill/librdkafka.git

    $ cd librdkafka   
    $ ./configure  
    $ make  
    $ sudo make install  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 C++래퍼 라이브러리(cppkafka) 설치하자. boost와 cmake가 이미 설치되어 있어야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ git clone https://github.com/mfontanini/cppkafka.git
    
    $ cd cppkafka  
    $ mkdir build  
    $ cd build  
    $ cmake ..  
    $ make   
    $ sudo make install  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;C++ 래퍼 라이브러리 소스코드에 examples 폴더가 있는데 프로듀서 예제가 있다. 근데, 사용전에 CMakeLists.txt를 좀 수정해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.9)
FIND_PACKAGE(Boost COMPONENTS program_options REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

set(CMAKE_CXX_FLAGS &quot;-std=c++11 -Wall&quot;)
SET(CMAKE_EXE_LINKER_FLAGS &quot;${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath -Wl,/usr/local/lib&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 내용을 맨 위에 넣어 주고 다음 실행하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ cd cppkafka/examples/
    $ mkdir build
    $ cd build
    $ cmake ..
    $ make producer 

    $ ./producer -b localhost:9092 -t test_topic
    # 터미널 글자를 입력하고 엔터를 누르면 된다.  
    # 실시간으로 전송되는 것을 컨슈머 터미널에서 확인 할 수 있다. 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;자바스크립트-프로듀서-예제&quot;&gt;자바스크립트 프로듀서 예제&lt;/h1&gt;

&lt;p&gt;To-be Updated&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.popit.kr/kafka-python-client-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8/&quot;&gt;파이썬 카프카 클라이언트 비교&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@dokkl2323/kafka-47c7b785c65f&quot;&gt;로컬에서 kafka 실행하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.popit.kr/author/peter5236&quot;&gt;카카오 Kafka운영 담당자의 글 모음&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">카프카를 알게 된지 수년이 지났는데, 드디어 써보게 되었다. 물류 시스템에 들어가는 멀티 로봇 제어 시스템에서 쓸 예정이다. 알다시피 2-3 대의 소수 로봇 제어에서는 이런 독립 메시징 시스템 없이도 간단히 가능하다. 그런데, 원대한 시스템을 꿈꾸는 이가 있어서 구색을 맞춰주기 위해 한번 검토 해보았다. 여기의 모든 예제와 설명은 우분투 16.04 기준으로 작성되었다.</summary></entry><entry><title type="html">길찾기 알고리즘</title><link href="/path_finding_algorithms" rel="alternate" type="text/html" title="길찾기 알고리즘" /><published>2019-03-10T20:00:01-04:00</published><updated>2019-03-10T20:00:01-04:00</updated><id>/path_finding_algorithms</id><content type="html" xml:base="/path_finding_algorithms">&lt;p&gt;Autonomous Navigation 부터 Fleet Management 시스템까지 패스파인딩 알고리즘이 안들어가는데 없다. 지금까지 검토한 내용 정리 해보자.&lt;/p&gt;

&lt;h1 id=&quot;single-agent-pathfindings&quot;&gt;Single-Agent Pathfindings&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;[A* Algorithm]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 알고리즘이 소개된건 이미 몇 십년 전이지만, 여전히 대부분의 시스템에서 사용하는 길찾기 알고리즘은 A* 일 것이다. 동작의 핵심은 Heap Queue, 또는 Priority Queue을 사용한 DFS이다. 정렬을 위한 값/코스트는 (현재 위치부터 출발점 까지 거리 + 현재 위치부터 도착점 까지 거리)이며, 유클리디안 또는 맨하턴 방식으로 계산을 하는데, 당연히 맨하턴이 빠르겄지만서도 체감상 뭘 써도 차이는 없는 듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/AtsushiSakai/PythonRoboticsGifs/raw/master/PathPlanning/AStar/animation.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jfrascon/SLAM_AND_PATH_PLANNING_ALGORITHMS/blob/master/08-PATH_PLANNING/CODE/pp_01_e_astar_question.py&quot;&gt;파이썬으로 작성된 코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itmining.tistory.com/66&quot;&gt;한국어로 설명한 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[Potential Field/Function]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A* 가 다좋은데, 문제가 하나 있다면 최적의 길찾기를 하다 보니, 벽에 딱 붙어가는 경우가 생긴다. 사람이 보기에는 장애물이 없다면 통로의 가운데 지나가는게 보기에 가장 좋기 때문이다. 그런 이유로 장애물 주위에 가중치를 부여해서 A* 의 코스트 값에 더해주면, 좀더 보기 좋은 길찾기가 가능해진다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nQtmUH3UCi4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jfrascon/SLAM_AND_PATH_PLANNING_ALGORITHMS/blob/master/08-PATH_PLANNING/CODE/pp_01_f_astar_potential_function_question.py&quot;&gt;A* 와 결합된 Potential Function - 파이썬 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[dijkstra Algorithm]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용하는 내부 자료 구조 때문에 A* 보다 성능이 좋을수가 없으나, 분산 처리가 가능하다는 매력이 있다. 참고만 하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/AtsushiSakai/PythonRoboticsGifs/raw/master/PathPlanning/Dijkstra/animation.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HFapeLxvdNg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/basecs/finding-the-shortest-path-with-a-little-help-from-dijkstra-613149fbdc8e&quot;&gt;Dijkstra 소개 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.uic.edu/~ajayk/SelfStabilization.pdf&quot;&gt;CS553 Distributed Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.rit.edu/~ark/winter2012/730/team/1/presentation2.pdf&quot;&gt;Distributed Shortest Paths Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;multi-agent-pathfindings&quot;&gt;Multi-Agent Pathfindings&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;[WHCA* Algorithm]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A* 에 시간 개념을 도입, 3D 환경에서 동작하게 만든 알고리즘. 적절한 크기의 타임 슬롯(Reservation Table)을 정하면, 무한 루프에 빠지는 일 없이 솔루션을 잘 찾아낸다. 속도는 코드 품질, 로봇의 수, 맵의 복잡도, 시스템 사양에 따라 틀리지만 대체로 좋은 성능을 보여준다. 40x40정도 크기이면 거의 실시간으로 동작한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pdfs.semanticscholar.org/1460/61be1affd4af17b8996f1d0316ad147368f5.pdf&quot;&gt;Complete Algorithms for Cooperative Pathfinding Problems, 2005년&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/igrek51/coop-pathfinder&quot;&gt;자바로 작성된 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DRx-17AHaw4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;[ECBS]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제일 처음으로 검토한 알고리즘이며, 프로젝트 중반까지도 사용했었으나, 혼잡 상황에서 계산량 증가로 실시간 길찾기에 문제점이 많아 결국 폐기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/whoenig/libMultiRobotPlanning&quot;&gt;libMultiRobotPlanning - ECBS를 포함한 여러 알고리즘 있음&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[AA-SIPP]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SIPP를 기반으로 Advanced 알고리즘. 허나, 이 계열의 알고리즘은 혼잡 상황에서 로봇 간 Collision이 발생하기 때문에 실제 사용하지는 않았다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1Jrye5S0ZV8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1703.04159.pdf&quot;&gt;Any-Angle Pathfinding for Multiple Agents Based on SIPP Algorithm, 2017년&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PathPlanning/AA-SIPP-m&quot;&gt;C++ 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AtsushiSakai/PythonRobotics&quot;&gt;Python Robotics, 최고의 로봇 관련 파이썬 예제코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jfrascon/SLAM_AND_PATH_PLANNING_ALGORITHMS/tree/master/08-PATH_PLANNING/CODE&quot;&gt;SLAM 및 Path-Planning MOOC 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.groundai.com/project/path-planning-for-robotic-mobile-fulfillment-systems/1#bib.bib24&quot;&gt;Path Planning for Robotic Mobile Fulfillment Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PathPlanning/MultiRobotPathFinding-ROS-Gazebo-Demo&quot;&gt;Gazebo로 멀티 로봇 시뮬레이션 구축&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">Autonomous Navigation 부터 Fleet Management 시스템까지 패스파인딩 알고리즘이 안들어가는데 없다. 지금까지 검토한 내용 정리 해보자.</summary></entry><entry><title type="html">캐나다에서 생일 파티</title><link href="/minha_6th_birthday" rel="alternate" type="text/html" title="캐나다에서 생일 파티" /><published>2019-03-10T20:00:01-04:00</published><updated>2019-03-10T20:00:01-04:00</updated><id>/minha_6th_birthday</id><content type="html" xml:base="/minha_6th_birthday">&lt;p&gt;많은 준비가 필요했던 엄청난(?) 생일 파티 였다. ㅎㅎ&lt;/p&gt;

&lt;h3 id=&quot;장소-물색&quot;&gt;장소 물색&lt;/h3&gt;

&lt;p&gt;다행히 살고 있는 콘도에서 큰 파티 룸이 있어 어렵지 않게 구할 수 있었다. 가격은 100불 정도 밖에 안하는데 크기는 반대편에서 소리를 질러도 들리지 않을 만큼 넓어서 어찌나 좋았던지 온 손님 모두 장소가 너무 마음에 들었다고 해서 좋았다.&lt;/p&gt;

&lt;h3 id=&quot;룹백-답례품&quot;&gt;룹백 (답례품)&lt;/h3&gt;

&lt;p&gt;캐나다에서는 생일 파티 관련하여 룰이 있다. 바로, 선물과 답례품이다. 나같은 귀차니스트에게는 재앙과도 같은 것인데 모두 하는거라 반항도 못하고 준비했다. 근데, 말이 쉽지 오기로 한 아이들의 수가 30명을 넘어가니 생일 파티 전날까지 준비/포장/보관하는데 집의 모든 인력과 집의 남는 공간을 룹백에 준비에 온전히 쏟아부었다.&lt;/p&gt;

&lt;h3 id=&quot;명단-정리와-알림&quot;&gt;명단 정리와 알림&lt;/h3&gt;

&lt;p&gt;우리 꼬맹이가 자기반 친구에게 엄마 아빠의 동의 없이 (동의가 뭔지 모름) 떠들고 다녀서 하게 된 파티라 반 아이가 메인 손님이다. 그런데 캐나다에서는 함부로 개인정보를 얻을 수가 없다. 이런 경우 정중히 학교에 리스트를 요청해서 연락처(이메일)를 받아야 한다. 일단 명단을 받고 나면, 생일 파티 전용 앱인가 사이트가 있는데 그걸로 생일 파티 이벤트 만들고 연락처를 등록한 다음 보내면 된다.&lt;/p&gt;

&lt;p&gt;더불어 엄청난 인맥을 자랑하는 마눌님께서 자기 지인 애들도 다 불러재끼면서 인원은 점점 나 학교 다닐때 학급인원까지 올라갔다. (물론 다오지는 않았다. ㅎㅎㅎ)&lt;/p&gt;

&lt;h3 id=&quot;파티-진행자&quot;&gt;파티 진행자&lt;/h3&gt;

&lt;p&gt;이 많은 인원을 첫째 아이와 몇 한국 아이 도움으로 해결해보겠단 발칙한 생각은 1주일만에 접고, 파티 진행자를 구하기로 했다. 종류도 많고, 컨택할 곳도 많았으나, 결국 풍선 할아버지 불러서 해결! ㅋㅋ 애들 모아 놓구 재미있게 얘기하면서 한 명씩 풍선을 만들어주었는데 애들이 참 좋아했다. 다만, 할배 체력의 급격한 저하로 30분 이후부터는 그냥 풍선만 만들어주고선 떠났다. ㅋ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/balooner.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;파티-음식&quot;&gt;파티 음식&lt;/h3&gt;

&lt;p&gt;캐나다에서 정말 정말 주의해야 하는것 중에 하나가 음식이다. 알러지 있는 애들이 어쩜 이리도 많은지~ ㅎㅎ 일단, 유치원생(6세 이하)이 참석하는 행사이면 무조건 &lt;strong&gt;넛프리&lt;/strong&gt;로 준비해야 한다. 그리고 각 아이들의 건강 상태 또한 파티전에 체크해 두어야한다. 다음으로 베지테리언의 존재도 신경 써야한다. 애들이 뭔 채식주의자냐 하겠지만, 독한(?) 부모일 경우 꼬꼬마 때부터 엄청나게 교육을 시킨다. 그래서 음식은 넛프리로만 준비하되, 채식주의자를 위한 먹을거리도 디폴트로 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eatnutfree.com/wp-content/uploads/2011/08/peanut_free-300x286.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;쓴 비용은 약1,000CAD정도 되며, 준비 기간은 약 3주, 개고생은 덤이다. 하는 것을 말리지 않으나 추천은 못하겠다. 참말로 힘들었다. ㅎ 가능하면 아이에게 미리 입막음(?)을 하고 저 돈으로 근사한 선물을 주는 것도 방법이 될거다. ㅋ&lt;/p&gt;

&lt;p&gt;그리고, 이건 여담인데 미국은 멜팅팟 문화라고 하고 캐나다는 모자이크 컬쳐라고 보통 말한다. 파티에 참석한 어른들의 행동을 보고 있으면 자연스레 깨닫게 된다. ㅋ 애들말고 어른들 말이다…. ㅎㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://usercontent1.hubstatic.com/13321276_f520.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Jong Yoon Kim</name></author><category term="canada" /><summary type="html">민하의 6번째 대 환장 생일 파뤼</summary></entry><entry><title type="html">CNN Benchmark</title><link href="/CNN_benchmark" rel="alternate" type="text/html" title="CNN Benchmark" /><published>2019-02-13T00:00:00-05:00</published><updated>2019-02-13T00:00:00-05:00</updated><id>/CNN_benchmark</id><content type="html" xml:base="/CNN_benchmark">&lt;p&gt;구글링하다 발견한 &lt;a href=&quot;https://arxiv.org/abs/1806.05512&quot;&gt;논문&lt;/a&gt;을 참조하여 간단히 정리.&lt;/p&gt;

&lt;p&gt;Accuracy가 높은 모델은 Classification으로 사용하고, 속도가 빠른 CNN은 Detection할때 사용하면 됨.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Top1 Accuracy]&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;AmoebaNet&lt;/li&gt;
  &lt;li&gt;NASNet&lt;/li&gt;
  &lt;li&gt;SENet&lt;/li&gt;
  &lt;li&gt;DPN&lt;/li&gt;
  &lt;li&gt;PolyNet&lt;/li&gt;
  &lt;li&gt;ResNeXt&lt;/li&gt;
  &lt;li&gt;InceptionV4&lt;/li&gt;
  &lt;li&gt;PyramidNet&lt;/li&gt;
  &lt;li&gt;Xception&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;[Info Density = Speed]&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SqueezeNext&lt;/li&gt;
  &lt;li&gt;TinyDarkNet&lt;/li&gt;
  &lt;li&gt;SqueezeNet&lt;/li&gt;
  &lt;li&gt;MobileNet&lt;/li&gt;
  &lt;li&gt;ZynqNet&lt;/li&gt;
  &lt;li&gt;CondenseNet&lt;/li&gt;
  &lt;li&gt;SuffleNet&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">구글링하다 발견한 논문을 참조하여 간단히 정리.</summary></entry><entry><title type="html">ROS &amp;amp; Drone 관련 사이트</title><link href="/ros+drone" rel="alternate" type="text/html" title="ROS &amp; Drone 관련 사이트" /><published>2017-11-02T00:00:00-04:00</published><updated>2017-11-02T00:00:00-04:00</updated><id>/ros+drone</id><content type="html" xml:base="/ros+drone">&lt;h2 id=&quot;ros-and-deep-learing&quot;&gt;ROS and Deep learing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.px4.io/en/setup/dev_env_linux_ubuntu.html&quot;&gt;ROS 개발 환경 + Pixhawk 개발 환경 한번에 만드는 스크립트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shunchan0677/Tensorflow_in_ROS&quot;&gt;텐서플로우랑 ROS랑 연결해서 MNIST 구현&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://projectsfromtech.blogspot.ca/2017/10/visual-object-recognition-in-ros-using.html&quot;&gt;케라스랑 연결해서 물체 인식&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39379747/import-opencv-mat-into-c-tensorflow-without-copying&quot;&gt;텐서플로우 + OpenCV에서 이미지 카피없이 사용하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[ROS Tutorial]
(https://www.youtube.com/watch?v=2Cmdu6mkxD0&amp;amp;list=PLJNGprAk4DF5PY0kB866fEZfz6zMLJTF8&amp;amp;index=3)&lt;/p&gt;

&lt;h2 id=&quot;how-to-start-a-drone-project-form-scratch&quot;&gt;How to start a drone project form scratch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://diydrones.com/forum/topics/setting-flight-mode-on-fly-sky-fs-t6&quot;&gt;fs-is 채널5 채널6 믹싱 방법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sysnet.pe.kr/2/0/1226&quot;&gt;hole punching 개념 설명 및 플밍 C#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DWVIEVjBKJo&quot;&gt;tshark packet sniffer 설명&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/sb1214/220389939185&quot;&gt;pixhawk로 개발 - 자세히 설명되어 있음&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/yngneers&quot;&gt;아두이노로 개발중인 드론 프로젝트 (국내 대학생)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.csail.mit.edu/drone_flies_through_forest_at_30_mph&quot;&gt;자율비행-MIT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://groups.csail.mit.edu/robotics-center/public_papers/Barry16.pdf&quot;&gt;자율비행-MIT 문서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ardupilot.org/dev/docs/raspberry-pi-via-mavlink.html&quot;&gt;pixhawk + raspberry pi 연결&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.swiftnav.com/wiki/&quot;&gt;정밀 GPS 측위&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techholic.co.kr/archives/48819&quot;&gt;실내자율주행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.college-code.com/blog/wp-content/uploads/2008/11/boost_serial_port_demo.cpp&quot;&gt;Boost를 활용한 시리얼통신 방법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/yoggy/3323808&quot;&gt;Boost를 활용한 시리얼통신 방법2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/umiddelb/armhf/wiki/Get-Docker-up-and-running-on-the-RaspberryPi-(ARMv6)-in-four-steps-(Wheezy)&quot;&gt;라즈비안에서 docker 사용&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arsviator.blogspot.kr/2015/09/gpio.html&quot;&gt;라즈베리파이 GPIO 고속 제어&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&quot;&gt;라즈비안 Lite 설치 (wifi 포함)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thepihut.com/blogs/raspberry-pi-tutorials/83502916-how-to-setup-wifi-on-raspbian-jessie-lite&quot;&gt;how to setup wifi on raspbian jessie lite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.qgis.org/2.8/en/docs/training_manual/basic_map/vector_data.html&quot;&gt;GIS 오픈소스&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/help/noobs-setup/&quot;&gt;라즈베리파이 인스톨 방법 (NOOBS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://projects.drogon.net/raspberry-pi/wiringpi/&quot;&gt;라즈베리파이 GPIO 라이브러리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[RC+아두이노 (한국 사이트, 시리즈, 자동차 개발)]
(http://eskeltt.blogspot.kr/2012/06/rcradio-control.html)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sparkfun.com/tutorials/348&quot;&gt;RC+아두이노 (외국 사이트)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.co.kr/search?q=cc3d+fs-ia6&amp;amp;biw=1233&amp;amp;bih=572&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwifgeGfz63LAhUBEpQKHdf4DZsQ_AUIBigB&amp;amp;dpr=2#imgrc=RycU3JHjF43UlM%3A&quot;&gt;CC3D Controller 연결 라인 정리 그림&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eastskykang.wordpress.com/2015/04/10/build-my-own-quadcopter-with-apm-and-dji-f450-flame-wheel/&quot;&gt;DJI F450 드론 조립 방법&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-make-pwm-signal-in-raspberry-pi&quot;&gt;How to make PWM signal in Raspberry PI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://raspberrypi-aa.github.io/session2/pwm-servo.html&quot;&gt;ServoBlaster와 파이손으로 한것인데, c++로 변경 가능할듯&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cosmosjs.blog.me/220665844005&quot;&gt;ServoBlaster 한것 - 파이손&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yeobi27.tistory.com/entry/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B42-B-Mini-Servo-%EB%8F%8C%EB%A0%A4%EB%B3%B4%EA%B8%B0&quot;&gt;전자회로 설명이 잘되어 있네 -_-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/richardghirst/PiBits/tree/master/ServoBlaster&quot;&gt;ServoBlaster - wiringpi 만든애가 추천하거&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://electronut.in/controlling-two-servos-with-hardware-pwm-on-the-raspberry-pi-model-a/&quot;&gt;wiringpi에서 softpwm 동작 이해할 수 있는 거&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/WiringPi/WiringPi/blob/master/wiringPi/softServo.c&quot;&gt;wiringpi에서 소프트 서보 소스코드&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.pololu.com/t/controlling-servos-without-timers/6597&quot;&gt;아두이노에서 서보 각도 맞춰서 구하기&lt;/a&gt;&lt;/p&gt;</content><author><name>Jong Yoon Kim</name></author><category term="technology" /><summary type="html">예전에 찾아둔 사이트와 최근 인터뷰 보면서 알게된 것 정리</summary></entry><entry><title type="html">캐나다 IT 잡 인터뷰 관련</title><link href="/job-interview" rel="alternate" type="text/html" title="캐나다 IT 잡 인터뷰 관련" /><published>2017-11-01T00:00:00-04:00</published><updated>2017-11-01T00:00:00-04:00</updated><id>/job-interview</id><content type="html" xml:base="/job-interview">&lt;h2 id=&quot;시작&quot;&gt;시작&lt;/h2&gt;

&lt;p&gt;개발자 면접이라 다 덮어놓고 코딩 인터뷰만 해주면 고마울(?)것 같으나 막상 실전에 가보면 코딩 인터뷰없이 경력 사항이나 behavior question을 하는 곳도 굉장히 많음. 영어 네이티브가 아니기 때문에 확실한 준비가 필요! 솔직히 코딩 인터뷰는 string을 역순으로 정리 하는데 추가 메모리 사용 없이 해보라고 한게 다였음~ ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devskiller.com/45-behavioral-questions-to-use-during-non-technical-interview-with-developers/&quot;&gt;자주 묻는 Behavior Questions&lt;/a&gt; : 실제 여기 있는 거 몇개 질문 받아 봄. 되게 상세히 파면서 물어보기 때문에 예상 되는 추가 질문에 대한 답변도 고민해두는게 좋음. 생각한게 막상 온사이트에서 입으로 잘 나오지 않기 때문에 &lt;strong&gt;소리내서 예상 답변 준비&lt;/strong&gt;하는 것이 키 뽀인트!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rmbconsulting.us/publications/a-c-test-the-0x10-best-questions-for-would-be-embedded-programmers/&quot;&gt;엠베디드 시스템 및 C관련 인터뷰 질문&lt;/a&gt; : 코딩 인터뷰 외에 기본적인 지식을 묻는 질문도 함. 나의 경우에는 폰스크닝관 온사이트에서 모두 질문 받아봄.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/c-plus-plus/&quot;&gt;c++ 질문들&lt;/a&gt; : geeksforgeeks의 모든 내용을 안다면 FANG 할아버지가 와도 다 합격 가능할 만큼 중요하고 좋은 내용 많음. c++외에 다른 언어 관련해서도 찾을 수 있음. db도 있고… 내가 보기엔 책으로 굳이 안봐도 된다면 cracking the code보다 이 사이트를 딥러닝(!) 하는게 더 도움 될 듯~ :)&lt;/p&gt;

&lt;h2 id=&quot;코딩-인터뷰-문제-풀이-사이트&quot;&gt;코딩 인터뷰 문제 풀이 사이트&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;leetcode&lt;/a&gt;: FANG규모의 회사 지원할게 아니라면 easy 문제 위주로 풀면됨. 지금까지 인터뷰 해본 결과 medium이상 수준의 문제는 묻지 않음. &lt;br /&gt;
&lt;a href=&quot;https://www.interviewbit.com/courses/programming/&quot;&gt;interviewbit&lt;/a&gt; : 롤플레잉 게임하는 것과 유사한 형태로 문제를 풀 수 있음. FANG지원 전에 풀면 좋을듯&lt;br /&gt;
&lt;a href=&quot;https://www.hackerrank.com/domains/algorithms/warmup&quot;&gt;hackerrank 알고리즘&lt;/a&gt; : 요즘 주로 애용하는 사이트. c++, python을 둘다 풀어보는데 기본적으로 사용하는 자료 구조나 내장 함수가 저절로 외워짐&lt;/p&gt;

&lt;h2 id=&quot;코딩-인터뷰시-영어로-설명할-때-참고&quot;&gt;코딩 인터뷰시 영어로 설명할 때 참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/domains/tutorials/cracking-the-coding-interview&quot;&gt;cracking the coding interview in hackerrank&lt;/a&gt; : 쉬운 문제이지만 기본적으로 알고 있어야 하는 내용을 저자가 설명해줌. 동영상 강의는 꼭 보고 입으로 따라 해보기. 자바 코드로 설명하는 것이 나에게는 별로~ ㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCQoN6H05vCGN7EGkarCBHYA&quot;&gt;C++, Python, 자료구조 등을 영어로 설명해주는 비디오&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기타-참고-사이트&quot;&gt;기타 참고 사이트&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/minsuk-heo/problemsolving&quot;&gt;미국에서 개발자로 일하는 허민석님 깃허브&lt;/a&gt; : Python 코드로 간단히 자료 구조 살펴 볼때 엄청 좋음. 인터뷰 전날 한번 훓어보고 가는 사이트&lt;/p&gt;

&lt;h2 id=&quot;실제로-받았던-질문들&quot;&gt;실제로 받았던 질문들&lt;/h2&gt;

&lt;p&gt;캐나다 지원시 받은 질문들이니 지역 고려 필요함. 미국은 대부분 코딩인터뷰가 제일 중요하다고 하나 실제 캐나다에서는 코딩 인터뷰 없는 경우도 꽤 많았음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;32bit 시스템에서 메모리 할당은 어떻게 하나?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1C가 10진수로 뭐냐?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;폰북을 만드는데 어떤 데이터 구조 쓸거냐?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바이너리 서치 트리의 검색의 시간 복잡도는?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Virtual Function이란?&lt;/p&gt;

    &lt;p&gt;class A {&lt;br /&gt;
      public:&lt;br /&gt;
      void foo() {printf (”A”);}&lt;br /&gt;
  };&lt;br /&gt;
  class B : public A{&lt;br /&gt;
      public: &lt;br /&gt;
      virtual void foo() {printf (”B”);}&lt;br /&gt;
  }; &lt;br /&gt;
  class C : public B { &lt;br /&gt;
      public: &lt;br /&gt;
      void foo() {printf (”C”);} &lt;br /&gt;
  };&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 클래스를 보고 다음에 프린트 되는 값을 적으시오. &lt;추가질문&gt; 그 이유는?  
  A *a = new B; a-&amp;gt;foo();  
  A *b = new C; b-&amp;gt;foo();  
  B *c = new C; c-&amp;gt;foo();&lt;/추가질문&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 element를 자주 사용 또는 삭제 할 때 사용하면 좋은 것은? &lt;추가질문&gt; 그다음으로 쓸 수 있는 데이터 구조와 그렇게 생각하는 이유는?  
  가) linked list 나) stack 다) heap 라) queue 마) balanced binary tree&lt;/추가질문&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래의 Singleton 클래스를 멀티스레딩 환경에서 사용할때 발생할 수 있는 문제? 그리고 막는 방법은? &lt;추가 질문=&quot;&quot;&gt; 효율적!!으로 바꾸는 방법은?&lt;/추가&gt;&lt;/p&gt;

    &lt;p&gt;class Singleton { &lt;br /&gt;
      static Singleton* Instance(){  &lt;br /&gt;
          static *instance = null;&lt;br /&gt;
          if(instance) {&lt;br /&gt;
              instance = new Singleton;&lt;br /&gt;
          }&lt;br /&gt;
          return instance;&lt;br /&gt;
      }&lt;br /&gt;
  };&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;class 구현시 open api로 사용을 고려 할때 const 최적 활용 방법&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;추가질문&gt; bool operator == (const A&amp;amp; a) const; 가 올바른 표현이다. 그렇다면 가장 뒤의 const가 붙은 이유는?  
- void reverse(char* str) 함수를 추가 메모리 사용 없이 구현 (화이트 보드에...)  
- hash table의 속도는? &lt;추가 질문=&quot;&quot;&gt; 내부적으로 어떻게 동작 하는지 수도 코드로 구현  
- very_heavy_data class는 내부 데이터가 많아 constructor 동작이 굉장히 무겁다. 그렇다면 very_heavy_data를 멤버 변수로 갖는 아래 X class의 생성자를 효율적으로 하는 방법은?  

	class X {  
		very_heavy_data data_;  
		public:  
		X(very_heavy_data&amp;amp; d){  
			// 먼가를 하시오~!  
		}  
	};  
	
- 아래 두 클래스의 hierarchy 를 보고 무엇이 잘못되었는지 설명하고 가능하면 수정해라.

	class intArray {  
		public:  
		int get(int index);  
		void set(int index, int val);  
	};  
	
	class intStack: public intArray{  
		public:  
		void push(int v);  
		int pop();  
	};  
   
## 캐나다 연봉 정보    
 
주 별 소프트웨어 개발자 연봉 정보가 틀리므로 [이 사이트](https://www.jobbank.gc.ca/report-eng.do?area=9219&amp;amp;lang=eng&amp;amp;noc=2173&amp;amp;ln=n&amp;amp;s=1#report_tabs_container2)에서 
확인이 필요함. 협상을 이걸 기준으로 하면 될 것이나 영어 핸디캡 때문인지 기대 이하의 금액으로... ㅎㅎㅎㅎ ㅠ,.ㅠ  
  
  **온타리오 신입($50,000), 평균 ($89,000), 상급($130,000)**  
  
  

 
&lt;/추가&gt;&lt;/추가질문&gt;</content><author><name>Jong Yoon Kim</name></author><category term="canada" /><summary type="html">3개월 정도 캐나다에서 구직 활동하며 쌓은 경험 정리~</summary></entry></feed>